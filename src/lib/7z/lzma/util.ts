/** 80**************************************************************************
 * Ref. [[lzma1]/src/utils.ts](https://github.com/xseman/lzma1/blob/master/src/utils.ts)
 *    * Simple constants are moved to "alias.ts"
 *    * Remove `[number, number]` 64-bit integer and arithmetic
 *
 * @module lib/7z/lzma/util
 * @license MIT
 ******************************************************************************/

import type { uint, uint32, uint8 } from "@fe-lib/alias.ts";
import type { CLen, CProb, CProbPrice, CState } from "./alias.ts";
import { kNumLenToPosStates, PROB_INIT_VAL } from "./alias.ts";
/*80--------------------------------------------------------------------------*/

export class BitTree {
  NumBits: uint8;
  Probs: CProb[];

  constructor(NumBits: uint8) {
    this.NumBits = NumBits;
    this.Probs = Array.mock<CProb>(1 << NumBits);
  }

  Init() {
    initProbs(this.Probs);
  }
}

//jjjj TOCLEANUP
// /* Range coder constants */
// //jjjj TOCLEANUP
// // export const kNumMoveReducingBits = 2;
// // export const kNumBitPriceShiftBits = 6;
// export const kNumMoveReducingBits = 4;
// export const kNumBitPriceShiftBits = 4;
// /* ~ */

/**
 * CRC32 lookup table for hash calculations\
 * `uint32[256]`
 */
export const CRC32_TABLE = /* deno-fmt-ignore */ [
  0x00000000,  0x77073096,  0xEE0E612C,  0x990951BA,  0x076DC419,  0x706AF48F,
  0xE963A535,  0x9E6495A3,  0x0EDB8832,  0x79DCB8A4,  0xE0D5E91E,  0x97D2D988,
  0x09B64C2B,  0x7EB17CBD,  0xE7B82D07,  0x90BF1D91,  0x1DB71064,  0x6AB020F2,
  0xF3B97148,  0x84BE41DE,  0x1ADAD47D,  0x6DDDE4EB,  0xF4D4B551,  0x83D385C7,
  0x136C9856,  0x646BA8C0,  0xFD62F97A,  0x8A65C9EC,  0x14015C4F,  0x63066CD9,
  0xFA0F3D63,  0x8D080DF5,  0x3B6E20C8,  0x4C69105E,  0xD56041E4,  0xA2677172,
  0x3C03E4D1,  0x4B04D447,  0xD20D85FD,  0xA50AB56B,  0x35B5A8FA,  0x42B2986C,
  0xDBBBC9D6,  0xACBCF940,  0x32D86CE3,  0x45DF5C75,  0xDCD60DCF,  0xABD13D59,
  0x26D930AC,  0x51DE003A,  0xC8D75180,  0xBFD06116,  0x21B4F4B5,  0x56B3C423,
  0xCFBA9599,  0xB8BDA50F,  0x2802B89E,  0x5F058808,  0xC60CD9B2,  0xB10BE924,
  0x2F6F7C87,  0x58684C11,  0xC1611DAB,  0xB6662D3D,  0x76DC4190,  0x01DB7106,
  0x98D220BC,  0xEFD5102A,  0x71B18589,  0x06B6B51F,  0x9FBFE4A5,  0xE8B8D433,
  0x7807C9A2,  0x0F00F934,  0x9609A88E,  0xE10E9818,  0x7F6A0DBB,  0x086D3D2D,
  0x91646C97,  0xE6635C01,  0x6B6B51F4,  0x1C6C6162,  0x856530D8,  0xF262004E,
  0x6C0695ED,  0x1B01A57B,  0x8208F4C1,  0xF50FC457,  0x65B0D9C6,  0x12B7E950,
  0x8BBEB8EA,  0xFCB9887C,  0x62DD1DDF,  0x15DA2D49,  0x8CD37CF3,  0xFBD44C65,
  0x4DB26158,  0x3AB551CE,  0xA3BC0074,  0xD4BB30E2,  0x4ADFA541,  0x3DD895D7,
  0xA4D1C46D,  0xD3D6F4FB,  0x4369E96A,  0x346ED9FC,  0xAD678846,  0xDA60B8D0,
  0x44042D73,  0x33031DE5,  0xAA0A4C5F,  0xDD0D7CC9,  0x5005713C,  0x270241AA,
  0xBE0B1010,  0xC90C2086,  0x5768B525,  0x206F85B3,  0xB966D409,  0xCE61E49F,
  0x5EDEF90E,  0x29D9C998,  0xB0D09822,  0xC7D7A8B4,  0x59B33D17,  0x2EB40D81,
  0xB7BD5C3B,  0xC0BA6CAD,  0xEDB88320,  0x9ABFB3B6,  0x03B6E20C,  0x74B1D29A,
  0xEAD54739,  0x9DD277AF,  0x04DB2615,  0x73DC1683,  0xE3630B12,  0x94643B84,
  0x0D6D6A3E,  0x7A6A5AA8,  0xE40ECF0B,  0x9309FF9D,  0x0A00AE27,  0x7D079EB1,
  0xF00F9344,  0x8708A3D2,  0x1E01F268,  0x6906C2FE,  0xF762575D,  0x806567CB,
  0x196C3671,  0x6E6B06E7,  0xFED41B76,  0x89D32BE0,  0x10DA7A5A,  0x67DD4ACC,
  0xF9B9DF6F,  0x8EBEEFF9,  0x17B7BE43,  0x60B08ED5,  0xD6D6A3E8,  0xA1D1937E,
  0x38D8C2C4,  0x4FDFF252,  0xD1BB67F1,  0xA6BC5767,  0x3FB506DD,  0x48B2364B,
  0xD80D2BDA,  0xAF0A1B4C,  0x36034AF6,  0x41047A60,  0xDF60EFC3,  0xA867DF55,
  0x316E8EEF,  0x4669BE79,  0xCB61B38C,  0xBC66831A,  0x256FD2A0,  0x5268E236,
  0xCC0C7795,  0xBB0B4703,  0x220216B9,  0x5505262F,  0xC5BA3BBE,  0xB2BD0B28,
  0x2BB45A92,  0x5CB36A04,  0xC2D7FFA7,  0xB5D0CF31,  0x2CD99E8B,  0x5BDEAE1D,
  0x9B64C2B0,  0xEC63F226,  0x756AA39C,  0x026D930A,  0x9C0906A9,  0xEB0E363F,
  0x72076785,  0x05005713,  0x95BF4A82,  0xE2B87A14,  0x7BB12BAE,  0x0CB61B38,
  0x92D28E9B,  0xE5D5BE0D,  0x7CDCEFB7,  0x0BDBDF21,  0x86D3D2D4,  0xF1D4E242,
  0x68DDB3F8,  0x1FDA836E,  0x81BE16CD,  0xF6B9265B,  0x6FB077E1,  0x18B74777,
  0x88085AE6,  0xFF0F6A70,  0x66063BCA,  0x11010B5C,  0x8F659EFF,  0xF862AE69,
  0x616BFFD3,  0x166CCF45,  0xA00AE278,  0xD70DD2EE,  0x4E048354,  0x3903B3C2,
  0xA7672661,  0xD06016F7,  0x4969474D,  0x3E6E77DB,  0xAED16A4A,  0xD9D65ADC,
  0x40DF0B66,  0x37D83BF0,  0xA9BCAE53,  0xDEBB9EC5,  0x47B2CF7F,  0x30B5FFE9,
  0xBDBDF21C,  0xCABAC28A,  0x53B39330,  0x24B4A3A6,  0xBAD03605,  0xCDD70693,
  0x54DE5729,  0x23D967BF,  0xB3667A2E,  0xC4614AB8,  0x5D681B02,  0x2A6F2B94,
  0xB40BBE37,  0xC30C8EA1,  0x5A05DF1B,  0x2D02EF8D,
];

/** Pre-computed static instances for common use */
const PROB_PRICES: CProbPrice[] = createProbPrices();
// const a_ = [];
// for (let i = 0; i < PROB_PRICES.length; ++i) {
//   a_.push(`${PROB_PRICES[i]?.toString(16)},`);
//   if ((i + 1) % 16 === 0) {
//     console.log(a_.join(""));
//     a_.length = 0;
//   }
// }

/**
 * Get bit price using pre-computed probability prices
 * @const @param prob_x `>= 1`
 * @const @param bit_x
 */
export const getBitPrice = (prob_x: CProb, bit_x: 0 | 1): CProbPrice => {
  return PROB_PRICES[((prob_x - bit_x ^ -bit_x) & 0x7ff) >>> 2];
};

/**
 * Get reverse price for array of models
 * @borrow @const @param probs_x
 * @param numBits_x
 * @param symbol_x
 * @const @param startIndex_x
 */
export const reverseGetPrice = (
  probs_x: CProb[],
  numBits_x: uint8,
  symbol_x: uint8,
  startIndex_x: uint = 0,
): CProbPrice => {
  let m_ = 1, price: CProbPrice = 0;
  for (; numBits_x--;) {
    const bit = (symbol_x & 1) as 0 | 1;
    symbol_x >>>= 1;
    price += getBitPrice(probs_x[startIndex_x + m_], bit);
    m_ = m_ << 1 | bit;
  }
  return price;
};

export const G_FAST_POS: uint8[] = createFastPos();
// const b_ = [];
// for (let i = 0; i < G_FAST_POS.length; ++i) {
//   b_.push(`${G_FAST_POS[i]},`);
//   if ((i + 1) % 16 === 0) {
//     console.log(b_.join(""));
//     b_.length = 0;
//   }
// }

/**
 * Get position slot for a distance value
 * @param @param pos_x
 */
export function getPosSlot(pos_x: uint32): uint8 {
  if (pos_x < 0x800) return G_FAST_POS[pos_x];
  if (pos_x < 0x20_0000) return G_FAST_POS[pos_x >> 10] + 20;
  return G_FAST_POS[pos_x >> 20] + 40;
}

/**
 * Copy array data with bounds checking and overlap handling
 * @borrow @const @param src_x
 * @const @param srcOfs_x
 * @borrow @param tgt_x
 * @const @param tgtOfs_x
 * @const @param len_x
 */
export function arraycopy(
  src_x: uint8[],
  srcOfs_x: number,
  tgt_x: uint8[],
  tgtOfs_x: number,
  len_x: number,
): void {
  /* Bounds checking */
  if (
    srcOfs_x < 0 || tgtOfs_x < 0 || len_x < 0 ||
    srcOfs_x + len_x > src_x.length || tgtOfs_x + len_x > tgt_x.length
  ) return;

  if (
    src_x === tgt_x &&
    srcOfs_x < tgtOfs_x &&
    tgtOfs_x < srcOfs_x + len_x
  ) {
    /* Overlapping regions - copy backwards */
    for (let i = len_x; i--;) {
      tgt_x[tgtOfs_x + i] = src_x[srcOfs_x + i];
    }
  } else {
    /* Non-overlapping or safe regions - copy forward */
    for (let i = 0; i < len_x; i++) {
      tgt_x[tgtOfs_x + i] = src_x[srcOfs_x + i];
    }
  }
}
/*80--------------------------------------------------------------------------*/
/* Bit model operations */

/** Initialize bit models with default probability  */
export function initProbs(probs: CProb[]): void {
  probs.fill(PROB_INIT_VAL);
}
/*80--------------------------------------------------------------------------*/
/* Position and state operations */

/**
 * Get length to position state mapping
 * @const @param len_x
 */
export const getLenToPosState = (len_x: CLen): uint8 => {
  return Math.min(len_x, kNumLenToPosStates - 1);
};

export const UpdateState_Literal = (state: CState): CState =>
  state < 4 ? 0 : state < 10 ? state - 3 : state - 6;
export const UpdateState_Match = (state: CState): CState => state < 7 ? 7 : 10;
export const UpdateState_Rep = (state: CState): CState => state < 7 ? 8 : 11;
export const UpdateState_ShortRep = (state: CState): CState =>
  state < 7 ? 9 : 11;
/*80--------------------------------------------------------------------------*/
/* Bit tree operations */

/**
 * Create probability prices lookup table
 * @return `length === 0x200`
 */
export function createProbPrices(): CProbPrice[] {
  const probPrices: CProbPrice[] = [];
  for (let i = 9; i--;) {
    const start = 1 << (9 - i - 1);
    const end = 1 << (9 - i);

    for (let j = start; j < end; ++j) {
      probPrices[j] = (i << 6) + ((end - j) << 6 >>> (9 - i - 1));
    }
  }

  return probPrices;
}
/*
   ,240,200,1E0,1C0,1B0,1A0,190,180,178,170,168,160,158,150,148,
140,13C,138,134,130,12C,128,124,120,11C,118,114,110,10C,108,104,
100,FE,FC,FA,F8,F6,F4,F2,F0,EE,EC,EA,E8,E6,E4,E2,
E0,DE,DC,DA,D8,D6,D4,D2,D0,CE,CC,CA,C8,C6,C4,C2,
C0,BF,BE,BD,BC,BB,BA,B9,B8,B7,B6,B5,B4,B3,B2,B1,
B0,AF,AE,AD,AC,AB,AA,A9,A8,A7,A6,A5,A4,A3,A2,A1,
A0,9F,9E,9D,9C,9B,9A,99,98,97,96,95,94,93,92,91,
90,8F,8E,8D,8C,8B,8A,89,88,87,86,85,84,83,82,81,
80,7F,7F,7E,7E,7D,7D,7C,7C,7B,7B,7A,7A,79,79,78,
78,77,77,76,76,75,75,74,74,73,73,72,72,71,71,70,
70,6F,6F,6E,6E,6D,6D,6C,6C,6B,6B,6A,6A,69,69,68,
68,67,67,66,66,65,65,64,64,63,63,62,62,61,61,60,
60,5F,5F,5E,5E,5D,5D,5C,5C,5B,5B,5A,5A,59,59,58,
58,57,57,56,56,55,55,54,54,53,53,52,52,51,51,50,
50,4F,4F,4E,4E,4D,4D,4C,4C,4B,4B,4A,4A,49,49,48,
48,47,47,46,46,45,45,44,44,43,43,42,42,41,41,40,
40,3F,3F,3F,3F,3E,3E,3E,3E,3D,3D,3D,3D,3C,3C,3C,
3C,3B,3B,3B,3B,3A,3A,3A,3A,39,39,39,39,38,38,38,
38,37,37,37,37,36,36,36,36,35,35,35,35,34,34,34,
34,33,33,33,33,32,32,32,32,31,31,31,31,30,30,30,
30,2F,2F,2F,2F,2E,2E,2E,2E,2D,2D,2D,2D,2C,2C,2C,
2C,2B,2B,2B,2B,2A,2A,2A,2A,29,29,29,29,28,28,28,
28,27,27,27,27,26,26,26,26,25,25,25,25,24,24,24,
24,23,23,23,23,22,22,22,22,21,21,21,21,20,20,20,
20,1F,1F,1F,1F,1E,1E,1E,1E,1D,1D,1D,1D,1C,1C,1C,
1C,1B,1B,1B,1B,1A,1A,1A,1A,19,19,19,19,18,18,18,
18,17,17,17,17,16,16,16,16,15,15,15,15,14,14,14,
14,13,13,13,13,12,12,12,12,11,11,11,11,10,10,10,
10,F,F,F,F,E,E,E,E,D,D,D,D,C,C,C,
C,B,B,B,B,A,A,A,A,9,9,9,9,8,8,8,
8,7,7,7,7,6,6,6,6,5,5,5,5,4,4,4,
4,3,3,3,3,2,2,2,2,1,1,1,1,0,0,0,
*/

/**
 * Create fast position lookup table
 * @return `length === 2048`
 */
export function createFastPos(): uint8[] {
  const gFastPos = [0, 1];
  let c_ = 2;

  for (let slotFast = 2; slotFast < 22; ++slotFast) {
    const k_ = 1 << ((slotFast >> 1) - 1);
    // console.log({ k_ });
    /* 1,1,2,2,4,4,8,8,...,256,256,512,512 */

    for (let j = 0; j < k_; ++j, ++c_) {
      gFastPos[c_] = slotFast;
    }
  }

  return gFastPos;
}
/*
0,1,2,3,4,4,5,5,6,6,6,6,7,7,7,7,
8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,
10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
*/
/*80--------------------------------------------------------------------------*/
