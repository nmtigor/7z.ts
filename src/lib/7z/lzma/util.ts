/** 80**************************************************************************
 * Ref. [[lzma1]/src/utils.ts](https://github.com/xseman/lzma1/blob/master/src/utils.ts)
 *    * Simple constants are moved to "alias.ts"
 *    * Remove `[number, number]` 64-bit integer and arithmetic
 *
 * @module lib/7z/lzma/util
 * @license MIT
 ******************************************************************************/

import type { uint, uint32, uint8 } from "@fe-lib/alias.ts";
import type { CLen, CProb, CProbPrice, CState } from "./alias.ts";
import { kNumLenToPosStates, PROB_INIT_VAL } from "./alias.ts";
/*80--------------------------------------------------------------------------*/

export class BitTree {
  NumBits: uint8;
  Probs: CProb[];

  constructor(NumBits: uint8) {
    this.NumBits = NumBits;
    this.Probs = Array.mock<CProb>(1 << NumBits);
  }

  Init() {
    initProbs(this.Probs);
  }
}

/** Pre-computed static instances for common use */
const PROB_PRICES: CProbPrice[] = createProbPrices();
// const a_ = [];
// for (let i = 0; i < PROB_PRICES.length; ++i) {
//   a_.push(`${PROB_PRICES[i]?.toString(16)},`);
//   if ((i + 1) % 16 === 0) {
//     console.log(a_.join(""));
//     a_.length = 0;
//   }
// }

/**
 * Get bit price using pre-computed probability prices
 * @const @param prob_x `>= 1`
 * @const @param bit_x
 */
export const getBitPrice = (prob_x: CProb, bit_x: 0 | 1): CProbPrice => {
  return PROB_PRICES[((prob_x - bit_x ^ -bit_x) & 0x7ff) >>> 2];
};

/**
 * Get reverse price for array of models
 * @borrow @const @param probs_x
 * @param numBits_x
 * @param symbol_x
 * @const @param startIndex_x
 */
export const reverseGetPrice = (
  probs_x: CProb[],
  numBits_x: uint8,
  symbol_x: uint8,
  startIndex_x: uint = 0,
): CProbPrice => {
  let m_ = 1, price: CProbPrice = 0;
  for (; numBits_x--;) {
    const bit = (symbol_x & 1) as 0 | 1;
    symbol_x >>>= 1;
    price += getBitPrice(probs_x[startIndex_x + m_], bit);
    m_ = m_ << 1 | bit;
  }
  return price;
};

export const G_FAST_POS: uint8[] = createFastPos();
// const b_ = [];
// for (let i = 0; i < G_FAST_POS.length; ++i) {
//   b_.push(`${G_FAST_POS[i]},`);
//   if ((i + 1) % 16 === 0) {
//     console.log(b_.join(""));
//     b_.length = 0;
//   }
// }

/**
 * Get position slot for a distance value
 * @param @param pos_x
 */
export function getPosSlot(pos_x: uint32): uint8 {
  if (pos_x < 0x800) return G_FAST_POS[pos_x];
  if (pos_x < 0x20_0000) return G_FAST_POS[pos_x >> 10] + 20;
  return G_FAST_POS[pos_x >> 20] + 40;
}
/*80--------------------------------------------------------------------------*/
/* Bit model operations */

/** Initialize bit models with default probability  */
export function initProbs(probs: CProb[]): void {
  probs.fill(PROB_INIT_VAL);
}
/*80--------------------------------------------------------------------------*/
/* Position and state operations */

/**
 * Get length to position state mapping
 * @const @param len_x
 */
export const getLenToPosState = (len_x: CLen): uint8 => {
  return Math.min(len_x, kNumLenToPosStates - 1);
};

export const UpdateState_Literal = (state: CState): CState =>
  state < 4 ? 0 : state < 10 ? state - 3 : state - 6;
export const UpdateState_Match = (state: CState): CState => state < 7 ? 7 : 10;
export const UpdateState_Rep = (state: CState): CState => state < 7 ? 8 : 11;
export const UpdateState_ShortRep = (state: CState): CState =>
  state < 7 ? 9 : 11;
/*80--------------------------------------------------------------------------*/
/* Bit tree operations */

/**
 * Create probability prices lookup table
 * @return `length === 0x200`
 */
export function createProbPrices(): CProbPrice[] {
  const probPrices: CProbPrice[] = [];
  for (let i = 9; i--;) {
    const start = 1 << (9 - i - 1);
    const end = 1 << (9 - i);

    for (let j = start; j < end; ++j) {
      probPrices[j] = (i << 6) + ((end - j) << 6 >>> (9 - i - 1));
    }
  }

  return probPrices;
}
/*
   ,240,200,1E0,1C0,1B0,1A0,190,180,178,170,168,160,158,150,148,
140,13C,138,134,130,12C,128,124,120,11C,118,114,110,10C,108,104,
100,FE,FC,FA,F8,F6,F4,F2,F0,EE,EC,EA,E8,E6,E4,E2,
E0,DE,DC,DA,D8,D6,D4,D2,D0,CE,CC,CA,C8,C6,C4,C2,
C0,BF,BE,BD,BC,BB,BA,B9,B8,B7,B6,B5,B4,B3,B2,B1,
B0,AF,AE,AD,AC,AB,AA,A9,A8,A7,A6,A5,A4,A3,A2,A1,
A0,9F,9E,9D,9C,9B,9A,99,98,97,96,95,94,93,92,91,
90,8F,8E,8D,8C,8B,8A,89,88,87,86,85,84,83,82,81,
80,7F,7F,7E,7E,7D,7D,7C,7C,7B,7B,7A,7A,79,79,78,
78,77,77,76,76,75,75,74,74,73,73,72,72,71,71,70,
70,6F,6F,6E,6E,6D,6D,6C,6C,6B,6B,6A,6A,69,69,68,
68,67,67,66,66,65,65,64,64,63,63,62,62,61,61,60,
60,5F,5F,5E,5E,5D,5D,5C,5C,5B,5B,5A,5A,59,59,58,
58,57,57,56,56,55,55,54,54,53,53,52,52,51,51,50,
50,4F,4F,4E,4E,4D,4D,4C,4C,4B,4B,4A,4A,49,49,48,
48,47,47,46,46,45,45,44,44,43,43,42,42,41,41,40,
40,3F,3F,3F,3F,3E,3E,3E,3E,3D,3D,3D,3D,3C,3C,3C,
3C,3B,3B,3B,3B,3A,3A,3A,3A,39,39,39,39,38,38,38,
38,37,37,37,37,36,36,36,36,35,35,35,35,34,34,34,
34,33,33,33,33,32,32,32,32,31,31,31,31,30,30,30,
30,2F,2F,2F,2F,2E,2E,2E,2E,2D,2D,2D,2D,2C,2C,2C,
2C,2B,2B,2B,2B,2A,2A,2A,2A,29,29,29,29,28,28,28,
28,27,27,27,27,26,26,26,26,25,25,25,25,24,24,24,
24,23,23,23,23,22,22,22,22,21,21,21,21,20,20,20,
20,1F,1F,1F,1F,1E,1E,1E,1E,1D,1D,1D,1D,1C,1C,1C,
1C,1B,1B,1B,1B,1A,1A,1A,1A,19,19,19,19,18,18,18,
18,17,17,17,17,16,16,16,16,15,15,15,15,14,14,14,
14,13,13,13,13,12,12,12,12,11,11,11,11,10,10,10,
10,F,F,F,F,E,E,E,E,D,D,D,D,C,C,C,
C,B,B,B,B,A,A,A,A,9,9,9,9,8,8,8,
8,7,7,7,7,6,6,6,6,5,5,5,5,4,4,4,
4,3,3,3,3,2,2,2,2,1,1,1,1,0,0,0,
*/

/**
 * Create fast position lookup table
 * @return `length === 2048`
 */
export function createFastPos(): uint8[] {
  const gFastPos = [0, 1];
  let c_ = 2;

  for (let slotFast = 2; slotFast < 22; ++slotFast) {
    const k_ = 1 << ((slotFast >> 1) - 1);
    // console.log({ k_ });
    /* 1,1,2,2,4,4,8,8,...,256,256,512,512 */

    for (let j = 0; j < k_; ++j, ++c_) {
      gFastPos[c_] = slotFast;
    }
  }

  return gFastPos;
}
/*
0,1,2,3,4,4,5,5,6,6,6,6,7,7,7,7,
8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,
10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,
15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
*/
/*80--------------------------------------------------------------------------*/
